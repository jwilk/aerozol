#!/usr/bin/env python3
# encoding=UTF-8

# Copyright © 2017-2025 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import base64
import datetime
import email.utils
import functools
import getpass
import gzip
import http.cookiejar
import io
import json
import re
import ssl
import sys
import urllib.parse
import urllib.request

if sys.version_info >= (3, 9):
    import zoneinfo
else:
    import pytz
    zoneinfo = None

int(0_0)  # Python >= 3.6 is required

class ScrapingError(RuntimeError):

    def __str__(self):
        args = self.args
        return f'{args[0]}: {args[1]!r}'

seconds_per_day = 24 * 60 * 60

def format_timedelta(td):
    result = []
    if td < datetime.timedelta(0):
        td = -td
        result += ['-']
    d = td.days
    s = td.seconds
    if (d < 0) or (s < 0):
        raise ValueError
    m = s // 60
    del s
    (h, m) = divmod(m, 60)
    if d > 0:
        result += [f'{d}d']
    if h > 0:
        result += [f'{h}h']
    if m > 0:
        result += [f'{m}m']
    return str.join(' ', result)

def format_timestamp(dt):
    if dt.tzinfo is not None:
        dt = dt.astimezone(None)
        dt = dt.replace(tzinfo=None)
    s = str(dt)
    assert s[-3] == ':'
    return s[:-3]

def format_size(n):
    if n < 0:
        sign = '-'
        n = - n
    else:
        sign = ''
    for prefix in ['', 'Ki', 'Mi', 'Gi']:
        if n < 1024:
            return f'{sign}{n:.1f} {prefix}B'
        n /= 1024
    raise NotImplementedError

if zoneinfo:
    tz_poland = zoneinfo.ZoneInfo('Europe/Warsaw')
    datetime_poland = functools.partial(datetime.datetime, tzinfo=tz_poland)
else:
    tz_poland = pytz.timezone('Europe/Warsaw')  # pylint: disable=bad-option-value,possibly-used-before-assignment
    def datetime_poland(year, month, day, hour, minute):
        dt = datetime.datetime(year, month, day, hour, minute)
        return tz_poland.localize(dt)

def print_client_info(client_info, *, options):
    server_now = client_info.get(datetime)
    client_now = datetime.datetime.now(datetime.timezone.utc)
    if options.debug_time:
        print('Server time:', server_now or '?')
        print('Client time:', client_now)
        if server_now is not None:
            print('Time delta:', client_now - server_now)
    client_data = client_info['clientData']
    client_info = client_info['data']
    login_info = client_info['loginData']
    iccid = login_info['cardNumber']
    bdi_info = client_info['bdiData']
    user = '{name} {surname}'.format_map(bdi_info)
    print('ICCID:', iccid)
    print('User:', user)
    exp_date = client_data['abonentData']['accountValidTo']
    exp_date_match = re.match(r'\A([0-9]{2})-([0-9]{2})-([0-9]{4})\Z', exp_date)
    if exp_date_match is None:
        raise ScrapingError('client-data/exp-date', exp_date)
    (day, month, year) = (int(x) for x in exp_date_match.groups())
    exp_date = datetime.date(year, month, day)
    print('Expires:', exp_date)
    pkg_info = client_info['currentPackage']
    if pkg_info is None:
        print('Plan: none')
        return
    now = server_now or client_now
    period = pkg_info['period']
    period = int(period)
    period = datetime.timedelta(days=period)
    exp_date = pkg_info['expirationDate']
    exp_date_match = re.match(r'\A([0-9]{2})[.]([0-9]{2})[.]([0-9]{4}) godzina ([0-9]{2}):([0-9]{2})\Z', exp_date)
    if exp_date_match is None:
        raise ScrapingError('client-info/exp-date', exp_date)
    (day, month, year, hour, minute) = (int(x) for x in exp_date_match.groups())
    exp_date = datetime_poland(year, month, day, hour, minute)
    exp_delta = exp_date - now
    act_date = exp_date - period
    act_delta = now - act_date
    print('Plan:')
    print('  Period:', format_timedelta(period))
    print(f'  Activated: {format_timestamp(act_date)} ({format_timedelta(act_delta)})')
    print(f'  Expires: {format_timestamp(exp_date)} ({format_timedelta(exp_delta)})')
    limit = pkg_info['totalLimit']
    limit = int(limit) << 20
    limit_daily = limit * seconds_per_day / period.total_seconds()
    remaining_limit = pkg_info['totalLimitsRemaining']
    remaining_limit = int(remaining_limit) << 20
    until_delta = exp_delta
    if options.until:
        until_delta = options.until - now
    remaining_limit_daily = remaining_limit * seconds_per_day / until_delta.total_seconds()
    used_limit = pkg_info['totalLimitsUsed']
    used_limit = int(used_limit) << 20
    used_limit_daily = used_limit * seconds_per_day / act_delta.total_seconds()
    if used_limit + remaining_limit != limit:
        raise ScrapingError('client-info/limit', (used_limit, remaining_limit, limit))
    print(f'  Size: {format_size(limit)}, {format_size(limit_daily)}/day')
    print(f'  Used: {format_size(used_limit)}, {format_size(used_limit_daily)}/day')
    print(f'  Remaining: {format_size(remaining_limit)}, {format_size(remaining_limit_daily)}/day')

def read_json(data):
    data = data.decode('UTF-8')
    return json.loads(data)

class UserAgent:

    user_agent_string = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0'
    base_url = 'https://moje.aero2.pl/'

    default_headers = {
        'User-Agent': user_agent_string,
        'Referer': base_url,
        'Accept-Encoding': 'gzip',
    }

    def __init__(self, cafile=None):
        tls_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH, cafile=cafile)
        https_handler = urllib.request.HTTPSHandler(context=tls_context)
        cookie_jar = http.cookiejar.CookieJar()
        cookie_proc = urllib.request.HTTPCookieProcessor(cookie_jar)
        self.opener = urllib.request.build_opener(
            https_handler,
            cookie_proc,
        )

    def _request(self, url, headers=(), **kwargs):
        url = urllib.parse.urljoin(self.base_url, url)
        headers = dict(self.default_headers, **(headers or {}))
        request = urllib.request.Request(
            url,
            headers=headers,
            **kwargs
        )
        response = self.opener.open(request)
        content_encoding = response.getheader('Content-Encoding', 'identity')
        data = response.read()
        if content_encoding == 'gzip':
            data = gzip.decompress(data)
        elif content_encoding == 'identity':
            pass
        else:
            raise RuntimeError(f'unexpected Content-Encoding: {content_encoding!r}')
        response.fp = io.BytesIO(data)
        response.length = None
        response.chunked = False
        return response

    def get(self, url, headers=(), **kwargs):
        return self._request(url, headers=headers, method='GET', **kwargs)

    def _json_request(self, url, headers=(), **kwargs):
        with_datetime = kwargs.pop('with_datetime', False)
        with self._request(url, headers=headers, **kwargs) as response:
            data = response.read()
            dt = response.getheader('Date')
        data = read_json(data)
        if with_datetime:
            dt = email.utils.parsedate_to_datetime(dt)
            data[datetime] = dt
        return data

    def json_get(self, url, **kwargs):
        return self._json_request(url, method='GET', **kwargs)

    def json_post(self, url, *, data, headers=(), **kwargs):
        data = json.dumps(data)
        data = data.encode('UTF-8')
        headers = {
            'Content-Type': 'application/json;charset=utf-8'
        }
        headers.update(headers)
        return self._json_request(url, method='POST', data=data, headers=headers, **kwargs)

def error(message):
    ap = argparse.ArgumentParser()
    message = f'{ap.prog}: {message}'
    print(message, file=sys.stderr)
    sys.exit(1)

class Crypto:

    # pylint: disable=import-outside-toplevel

    from cryptography.hazmat.primitives.ciphers import Cipher
    from cryptography.hazmat.primitives.ciphers.algorithms import AES
    from cryptography.hazmat.primitives.ciphers.modes import ECB
    from cryptography.hazmat.primitives.hashes import SHA1
    from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
    from cryptography.hazmat.primitives.padding import PKCS7

    @classmethod
    def encrypt(cls, text, key, salt):
        pdkey = cls.PBKDF2HMAC(cls.SHA1, 16, salt, 1).derive(key)
        padder = cls.PKCS7(cls.AES.block_size).padder()
        padded_text = padder.update(text.encode()) + padder.finalize()
        encryptor = cls.Cipher(cls.AES(pdkey), cls.ECB()).encryptor()
        ciphertext = encryptor.update(padded_text) + encryptor.finalize()
        return ciphertext

def base64_decode(s):
    return base64.b64decode(s, validate=True)

def base64_encode(s):
    return base64.b64encode(s).decode()

def ap_type_date(s):
    d = datetime.datetime.fromisoformat(s)
    return d.astimezone()
ap_type_date.__name__ = 'date'

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--until', metavar='YYYY-MM-DD', help='exhaustion target', type=ap_type_date)
    ap.add_argument('--password-file', metavar='FILE', help='read password from FILE')
    ap.add_argument('--ca-file', metavar='FILE', help='trust these CA certificate(s)')
    ap.add_argument('--debug-client-info', action='store_true', help=argparse.SUPPRESS)
    ap.add_argument('--debug-badssl', action='store_true', help=argparse.SUPPRESS)
    ap.add_argument('--debug-time', action='store_true', help=argparse.SUPPRESS)
    options = ap.parse_args()
    if options.debug_client_info:
        client_info = json.load(sys.stdin)
        print_client_info(client_info, options=options)
        return
    ua = UserAgent(cafile=options.ca_file)
    if options.debug_badssl:
        ua.base_url = 'https://self-signed.badssl.com/'
        try:
            ua.json_get('/')
        except urllib.error.URLError as exc:
            if isinstance(exc.args[0], ssl.SSLError):
                return
            raise
        raise ssl.SSLError
    if options.password_file is not None:
        with open(options.password_file, 'rt') as file:  # pylint: disable=unspecified-encoding
            password = file.readline()
        password = password.rstrip('\n')
    else:
        password = getpass.getpass('moje.aero2.pl password: ')
    if not password:
        error('error: empty password')
    with ua.get('/') as fp:
        index_html = fp.read()
    index_html = index_html.decode('UTF-8')
    match = re.search('<script src="(main[.].[0-9a-f]+[.]js)"', index_html)
    main_js_url = '/' + match.group(1)
    with ua.get(main_js_url) as fp:
        main_js = fp.read()
    main_js = main_js.decode('UTF-8')
    env = {}
    for match in re.finditer(r'\blogin(\w+):\s*"([\w/+]+=*)"', main_js):
        key, value = match.groups()
        value = base64_decode(value)
        env[key] = value
    conf_encrypt = functools.partial(Crypto.encrypt,
        key=env['Key'],
        salt=env['Salt'],
    )
    ua.default_headers['Authorization'] = 'Basic YWVybzpBQHIwMTI='
    login_info = ua.json_get('/ProstyPrepaid/selfcare/isLogin')
    if login_info != dict(error='SESSION_EXPIRED'):
        raise ScrapingError('is-login', login_info)
    iccid_info = ua.json_get('/ProstyPrepaid/selfcare/getICCID')
    iccid = iccid_info['data']['cardNumber']
    if isinstance(iccid, str) and len(iccid) == 10 and iccid.isdigit():
        pass
    else:
        raise ScrapingError('get-iccid', iccid_info)
    form_login = base64_encode(conf_encrypt(iccid))
    form_password = base64_encode(conf_encrypt(password))
    try:
        post_login_info = ua.json_post('/ProstyPrepaid/selfcare/login', data=dict(
            login=form_login,
            password=form_password,
        ))
    except urllib.error.HTTPError as exc:
        if exc.code == http.client.UNAUTHORIZED:
            exc_info = read_json(exc.read())
            if exc_info == {'error': 'LOGIN_ERROR'}:
                error('login error')
        raise
    login_error = post_login_info.get('error')
    if login_error:
        error(f"login error: {login_error!r}")
    login_result = post_login_info['result']
    if login_result != 'OK':
        raise ScrapingError('login-result', login_result)
    token = post_login_info.get('data')
    try:
        base64_decode(token)
    except ValueError:
        raise ScrapingError('token', token) from None
    ua.default_headers['X-CustomToken'] = token
    client_data = ua.json_get('/ProstyPrepaid/selfcare/getClientData')
    client_info = ua.json_get('/ProstyPrepaid/selfcare/getClientInfo', with_datetime=True)
    client_info['clientData'] = client_data['data']
    print_client_info(client_info, options=options)
    logout_info = ua.json_get('/ProstyPrepaid/selfcare/logout')
    if logout_info != dict(data=True):
        raise ScrapingError('logout', login_info)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et

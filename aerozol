#!/usr/bin/env python3

# Copyright © 2017-2018 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import datetime
import email.utils
import getpass
import http.cookiejar
import json
import re
import ssl
import subprocess
import sys
import urllib.parse
import urllib.request

import pytz

class ScrapingError(RuntimeError):

    def __str__(self):
        return '{0}: {1!r}'.format(*self.args)

seconds_per_day = 24 * 60 * 60

def format_timedelta(td):
    result = []
    if td < datetime.timedelta(0):
        td = -td
        result += ['-']
    d = td.days
    s = td.seconds
    if (d < 0) or (s < 0):
        raise ValueError
    m = s // 60
    del s
    (h, m) = divmod(m, 60)
    if d > 0:
        result += ['{0}d'.format(d)]
    if h > 0:
        result += ['{0}h'.format(h)]
    if m > 0:
        result += ['{0}m'.format(m)]
    return ' '.join(result)

def format_timestamp(dt):
    if dt.tzinfo is not None:
        dt = dt.astimezone(None)
        dt = dt.replace(tzinfo=None)
    s = str(dt)
    assert s[-3] == ':'
    return s[:-3]

def format_size(n):
    if n < 0:
        sign = '-'
        n = - n
    else:
        sign = ''
    for prefix in ['', 'Ki', 'Mi', 'Gi']:
        if n < 1024:
            return '{s}{0:.1f} {p}B'.format(n, s=sign, p=prefix)
        n /= 1024
    else:
        raise NotImplementedError

def print_client_info(client_info, *, options):
    server_now = client_info.get(datetime)
    client_now = datetime.datetime.now(pytz.utc)
    if options.debug_time:
        print('Server time:', server_now or '?')
        print('Client time:', client_now)
        if server_now is not None:
            print('Time delta:', client_now - server_now)
    tz_poland = pytz.timezone('Europe/Warsaw')
    client_info = client_info['data']
    login_info = client_info['loginData']
    iccid = login_info['cardNumber']
    bdi_info = client_info['bdiData']
    user = '{name} {surname}'.format(**bdi_info)
    print('ICCID:', iccid)
    print('User:', user)
    pkg_info = client_info['currentPackage']
    if pkg_info is None:
        print('Period: none')
        return
    now = server_now or client_now
    period = pkg_info['period']
    period = int(period)
    period = datetime.timedelta(days=period)
    exp_date = pkg_info['expirationDate']
    exp_date_match = re.match(r'\A([0-9]{2})[.]([0-9]{2})[.]([0-9]{4}) godzina ([0-9]{2}):([0-9]{2})\Z', exp_date)
    if exp_date_match is None:
        raise ScrapingError('client-info/exp-date', exp_date)
    (day, month, year, hour, minute) = (int(x) for x in exp_date_match.groups())
    exp_date = datetime.datetime(year, month, day, hour, minute)
    exp_date = tz_poland.localize(exp_date)
    exp_delta = exp_date - now
    act_date = exp_date - period
    act_delta = now - act_date
    print('Period:', format_timedelta(period))
    print('Activated: {0} ({1})'.format(format_timestamp(act_date), format_timedelta(act_delta)))
    print('Expires: {0} ({1})'.format(format_timestamp(exp_date), format_timedelta(exp_delta)))
    limit = pkg_info['totalLimit']
    limit = int(limit) << 20
    limit_daily = limit * seconds_per_day / period.total_seconds()
    remaining_limit = pkg_info['totalLimitsRemaining']
    remaining_limit = int(remaining_limit) << 20
    remaining_limit_daily = remaining_limit * seconds_per_day / exp_delta.total_seconds()
    used_limit = pkg_info['totalLimitsUsed']
    used_limit = int(used_limit) << 20
    used_limit_daily = used_limit * seconds_per_day / act_delta.total_seconds()
    if used_limit + remaining_limit != limit:
        raise ScrapingError('client-info/limit', (used_limit, remaining_limit, limit))
    print('Size: {0}, {1}/day'.format(format_size(limit), format_size(limit_daily)))
    print('Used: {0}, {1}/day'.format(format_size(used_limit), format_size(used_limit_daily)))
    print('Remaining: {0}, {1}/day'.format(format_size(remaining_limit), format_size(remaining_limit_daily)))

def read_json(data):
    data = data.decode('UTF-8')
    return json.loads(data)

class UserAgent(object):

    user_agent_string = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0'
    base_url = 'https://moje.aero2.pl/'

    def __init__(self, cafile=None):
        tls_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH, cafile=cafile)
        https_handler = urllib.request.HTTPSHandler(context=tls_context)
        cookie_jar = http.cookiejar.CookieJar()
        cookie_proc = urllib.request.HTTPCookieProcessor(cookie_jar)
        self.opener = urllib.request.build_opener(
            https_handler,
            cookie_proc,
        )
        self.default_headers = {
            'User-Agent': self.user_agent_string,
            'Referer': self.base_url,
        }

    def _json_request(self, url, headers=(), **kwargs):
        with_datetime = kwargs.pop('with_datetime', False)
        url = urllib.parse.urljoin(self.base_url, url)
        headers = dict(self.default_headers, **(headers or {}))
        request = urllib.request.Request(
            url,
            headers=headers,
            **kwargs
        )
        with self.opener.open(request) as response:
            data = response.read()
            dt = response.getheader('Date')
        data = read_json(data)
        if with_datetime:
            dt = email.utils.parsedate_to_datetime(dt)
            data[datetime] = dt
        return data

    def json_get(self, url, **kwargs):
        return self._json_request(url, method='GET', **kwargs)

    def json_post(self, url, *, data, headers=(), **kwargs):
        data = json.dumps(data)
        data = data.encode('UTF-8')
        headers = {
            'Content-Type': 'application/json;charset=utf-8'
        }
        headers.update(headers)
        return self._json_request(url, method='POST', data=data, headers=headers, **kwargs)

def require_python(*version):
    if sys.version_info < version:
        version_str = '.'.join(str(x) for x in version)
        message = 'Python >= {0} is required'.format(version_str)
        raise RuntimeError(message)

def error(message):
    ap = argparse.ArgumentParser()
    message = '{prog}: {msg}'.format(prog=ap.prog, msg=message)
    print(message, file=sys.stderr)
    sys.exit(1)

def main():
    require_python(3, 4)
    ap = argparse.ArgumentParser()
    ap.add_argument('--password-eval', metavar='COMMAND', help='use password from the COMMAND\'s stdout')
    ap.add_argument('--ca-file', metavar='FILE', help='trust these CA certificate(s)')
    ap.add_argument('--debug-client-info', action='store_true', help=argparse.SUPPRESS)
    ap.add_argument('--debug-badssl', action='store_true', help=argparse.SUPPRESS)
    ap.add_argument('--debug-time', action='store_true', help=argparse.SUPPRESS)
    options = ap.parse_args()
    if options.debug_client_info:
        client_info = json.load(sys.stdin)
        print_client_info(client_info, options=options)
        return
    ua = UserAgent(cafile=options.ca_file)
    if options.debug_badssl:
        ua.base_url = 'https://self-signed.badssl.com/'
        try:
            ua.json_get('/')
        except urllib.error.URLError as exc:
            if isinstance(exc.args[0], ssl.SSLError):
                return
            else:
                raise
    if options.password_eval:
        password = subprocess.check_output(
            options.password_eval,
            shell=True,
            universal_newlines=True,
        )
        password = password.rstrip('\n')
    else:
        password = getpass.getpass('moje.aero2.pl password: ')
    login_info = ua.json_get('/ProstyPrepaid/selfcare/isLogin')
    if login_info != dict(error='SESSION_EXPIRED'):
        raise ScrapingError('is-login', login_info)
    iccid_info = ua.json_get('/ProstyPrepaid/selfcare/getICCID')
    iccid = iccid_info['data']['cardNumber']
    if len(iccid) == 10 and iccid.isdigit():
        pass
    else:
        raise ScrapingError('get-iccid', login_info)
    try:
        post_login_info = ua.json_post('/ProstyPrepaid/selfcare/login', data=dict(
            login=iccid,
            password=password,
        ))
    except urllib.error.HTTPError as exc:
        if exc.code == http.client.UNAUTHORIZED:
            exc_info = read_json(exc.read())
            if exc_info == {'error': 'LOGIN_ERROR'}:
                error('login error')
        raise
    login_result = post_login_info['result']
    if login_result != 'OK':
        raise ScrapingError('login-result', login_result)
    client_info = ua.json_get('/ProstyPrepaid/selfcare/getClientInfo', with_datetime=True)
    print_client_info(client_info, options=options)
    logout_info = ua.json_get('/ProstyPrepaid/selfcare/logout')
    if logout_info != dict(data=True):
        raise ScrapingError('logout', login_info)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
